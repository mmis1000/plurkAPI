{
  "/APP/Users/me": {
    "type": "Users",
    "Required parameters:": {
      "__data": [
        "none"
      ]
    },
    "Successful return:": {
      "__data": [
        "user data as described above"
      ]
    }
  },
  "/APP/Users/update": {
    "type": "Users",
    "Required parameters:": {
      "__data": [
        "none"
      ]
    },
    "Optional parameters:": {
      "__data": [
        "full_name: Change full name.",
        "email: Change email.",
        "display_name: User's display name, can be empty and full unicode. Must be shorter than 15 characters.",
        "privacy: User's privacy settings. The option can be world (whole world can view the profile) or only_friends (only friends can view the profile).",
        "date_of_birth: Should be YYYY-MM-DD, example 1985-05-13."
      ],
      "full_name": ": Change full name.",
      "email": ": Change email.",
      "display_name": ": User's display name, can be empty and full unicode. Must be shorter than 15 characters.",
      "privacy": ": User's privacy settings. The option can be world (whole world can view the profile) or only_friends (only friends can view the profile).",
      "date_of_birth": ": Should be YYYY-MM-DD, example 1985-05-13."
    },
    "Successful return:": {
      "__data": [
        "HTTP 200 OK with a JSON object with updated user info {\"id\": 42, \"nick_name\": \"frodo_b\", ...}"
      ]
    },
    "Error returns:": {
      "__data": [
        "HTTP 400 BAD REQUEST with {\"error_text\": \"Email invalid\"} as body",
        "HTTP 400 BAD REQUEST with {\"error_text\": \"Email already found\"} as body",
        "HTTP 400 BAD REQUEST with {\"error_text\": \"Display name too long, should be less than 15 characters long\"} as body",
        "HTTP 400 BAD REQUEST with {\"error_text\": \"Internal service error. Please, try later\"} as body"
      ]
    }
  },
  "/APP/Users/updatePicture": {
    "type": "Users",
    "Required parameters:": {
      "__data": [
        "profile_image: The new profile image."
      ],
      "profile_image": ": The new profile image."
    },
    "Successful return:": {
      "__data": [
        "HTTP 200 OK with a JSON object with updated user info {\"id\": 42, \"nick_name\": \"frodo_b\", ...}"
      ]
    },
    "Error returns:": {
      "__data": [
        "HTTP 400 BAD REQUEST with {\"error_text\": \"Not supported image format or image too big\"} as body"
      ]
    }
  },
  "/APP/Users/getKarmaStats": {
    "type": "Users",
    "Required parameters:": {
      "__data": [
        "none"
      ]
    },
    "Successful return:": {
      "__data": [
        "HTTP 200 OK with a JSON object with karma stats {'karma_trend': ['1282046402-97.85', '1282060802-97.86', '1282075202-97.87', '1282089602-97.88', ...], 'karma_fall_reason': '', 'current_karma': 97.88, 'karma_graph': 'http://chart.apis.google.com/...'}",
        " karma_trend: Returns a list of 30 recent karma updates. Each update is a string '[[unixtimestamp]]-[[karma_value]]', e.g. a valid entry is '1282046402-97.85' karma_fall_reason: Why did karma drop? This value is a string and can be:\n\t\t\t\t\t\tfriends_rejections,\n\t\t\t\t\t\tinactivity,\n\t\t\t\t\t\ttoo_short_responses  "
      ]
    },
    "karma_trend:": {
      "__data": [
        "Returns a list of 30 recent karma updates. Each update is a string '[[unixtimestamp]]-[[karma_value]]', e.g. a valid entry is '1282046402-97.85'"
      ]
    },
    "karma_fall_reason:": {
      "__data": [
        "Why did karma drop? This value is a string and can be:\n\t\t\t\t\t\tfriends_rejections,\n\t\t\t\t\t\tinactivity,\n\t\t\t\t\t\ttoo_short_responses "
      ]
    }
  },
  "/APP/Profile/getOwnProfile": {
    "type": "Profile",
    "Required parameters:": {
      "__data": [
        "none"
      ]
    },
    "Successful return:": {
      "__data": [
        "Returns a JSON object with a lot of information that\n\t\t\t\tcan be used to construct a user's own profile and timeline.\n\n\t\t\t{ \"friends_count\": 12, \"fans_count\": 14,  \"unread_count\": 12, //number of plurks that are unread \"alerts_count\": 2, //number of alerts that are unread  \"user_info\": {user_info_profile_owner}, \"privacy\": \"world\",  \"plurks_users\": {\"12\": user_info_12, \"313\": user_info_313}, \"plurks\": [plurk_data_1, plurk_data_2] }  user_info is a JSON object holding data like {\"id\": 3, \"display_name\": \"Frodo B\", ...} plurk_data is a JSON object holding data like {\"plurk_id\": 3, \"content\": \"Test\", \"qualifier_translated\": \"says\", \"qualifier\": \"says\", \"lang\": \"en\" ...} "
      ]
    },
    "Error returns:": {
      "__data": []
    }
  },
  "/APP/Profile/getPublicProfile": {
    "type": "Profile",
    "Required parameters:": {
      "__data": [
        "user_id: The user_id of the public profile. Can be integer (like 34) or nick name (like amix)."
      ],
      "user_id": ": The user_id of the public profile. Can be integer (like 34) or nick name (like amix)."
    },
    "Successful return:": {
      "__data": [
        "Returns a JSON object with a lot of information that\n\t\t\t\tcan be used to construct a user's public profile and timeline.\n\n\t\t\t{ \"friends_count\": 12, \"fans_count\": 12,  \"user_info\": user_info_1,  \"are_friends\": false, //null if not logged in \"is_fan\": false, //null if not logged in \"is_following\": false, //null if not logged in \"has_read_permission\": true,  \"privacy\": \"world\", \"plurks\": [plurk_data_1, plurk_data_2, ...] }  user_info is a JSON object holding data like {\"id\": 3, \"display_name\": \"Frodo B\", ...} plurk_data is a JSON object holding data like {\"plurk_id\": 3, \"content\": \"Test\", \"qualifier_translated\": \"says\", \"qualifier\": \"says\", \"lang\": \"en\" ...} "
      ]
    },
    "Error returns:": {
      "__data": [
        "HTTP 400 BAD REQUEST with {\"error_text\": \"Invalid user_id\"} as body",
        "HTTP 400 BAD REQUEST with {\"error_text\": \"User not found\"} as body"
      ]
    }
  },
  "/APP/Realtime/getUserChannel": {
    "type": "Real time notifications",
    "Required parameters:": {
      "__data": [
        "none "
      ],
      "none": " "
    },
    "Successful return:": {
      "__data": [
        "\n        Return's a JSON object with an URL that you should listen to, e.g.  \n            {\"comet_server\": \"http://comet03.plurk.com/comet/1235515351741/?channel=generic-4-f733d8522327edf87b4d1651e6395a6cca0807a0\",\n            \n            \"channel_name\": \"generic-4-f733d8522327edf87b4d1651e6395a6cca0807a0\"}\n         "
      ]
    }
  },
  "/APP/Polling/getPlurks": {
    "type": "Polling",
    "Required parameters:": {
      "__data": [
        "offset: Return plurks newer than offset, formatted as 2009-6-20T21:55:34.\n\n        "
      ],
      "offset": ": Return plurks newer than offset, formatted as 2009-6-20T21:55:34.\n\n        "
    },
    "Optional parameters:": {
      "__data": [
        "limit: The max number of plurks to be returned (default: 20)\n            ",
        "favorers_detail, limited_detail and replurkers_detail: See /APP/Timline/getPlurks for details\n\n\t\t"
      ],
      "limit": ": The max number of plurks to be returned (default: 20)\n            ",
      "favorers_detail": ", limited_detail and replurkers_detail: See /APP/Timline/getPlurks for details\n\n\t\t"
    },
    "Successful return:": {
      "__data": [
        "Returns a JSON object of plurks and their users, e.g. {\"plurks\": [{\"plurk_id\": 3, \"content\": \"Test\", \"qualifier_translated\": \"says\", \"qualifier\": \"says\", \"lang\": \"en\" ...}, ...], \"plurk_users\": {\"3\": {\"id\": 3, \"nick_name\": \"alvin\", ...}} "
      ]
    },
    "Error returns:": {
      "__data": []
    }
  },
  "/APP/Polling/getUnreadCount": {
    "type": "Polling",
    "Required parameters:": {
      "__data": [
        "none"
      ]
    },
    "Successful return:": {
      "__data": [
        "Returns a JSON object of counts,\n\t\t\te.g. {\"all\": 2, \"my\": 1, \"private\": 1, \"responded\": 0} "
      ]
    },
    "Error returns:": {
      "__data": []
    }
  },
  "/APP/Timeline/getPlurk": {
    "type": "Timeline",
    "Required parameters:": {
      "__data": [
        "plurk_id: The unique id of the plurk. Should be passed as a number, and not base 36 encoded.\n\n        "
      ],
      "plurk_id": ": The unique id of the plurk. Should be passed as a number, and not base 36 encoded.\n\n        "
    },
    "Optional parameters:": {
      "__data": [
        "favorers_detail: If true, detailed users information about all favorers of this plurk will be included into \"plurk_users\"\n            ",
        "limited_detail: If true, detailed users information about recepients of this plurk will be included into \"plurk_users\" (if this plurk is private)\n            ",
        "replurkers_detail: If true, detailed users information about all replurkers of this plurk will be included into \"plurk_users\"\n\n        "
      ],
      "favorers_detail": ": If true, detailed users information about all favorers of this plurk will be included into \"plurk_users\"\n            ",
      "limited_detail": ": If true, detailed users information about recepients of this plurk will be included into \"plurk_users\" (if this plurk is private)\n            ",
      "replurkers_detail": ": If true, detailed users information about all replurkers of this plurk will be included into \"plurk_users\"\n\n        "
    },
    "Successful return:": {
      "__data": [
        "Returns a JSON object of the plurk and the owner, e.g. {\"plurks\": {\"plurk_id\": 3, \"content\": \"Test\", \"qualifier_translated\": \"says\", \"qualifier\": \"says\", \"lang\": \"en\" ...}, ...], \"user\": {\"id\": 3, \"nick_name\": \"alvin\", ...}} "
      ]
    },
    "Error returns:": {
      "__data": [
        "HTTP 400 BAD REQUEST with {\"error_text\": \"Plurk owner not found\"} as body",
        "HTTP 400 BAD REQUEST with {\"error_text\": \"Plurk not found\"} as body",
        "HTTP 400 BAD REQUEST with {\"error_text\": \"No permissions\"} as body"
      ]
    }
  },
  "/APP/Timeline/getPlurks": {
    "type": "Timeline",
    "Required parameters:": {
      "__data": [
        "none"
      ]
    },
    "Optional parameters:": {
      "__data": [
        "offset: Return plurks older than offset, formatted as 2009-6-20T21:55:34.\n\t    ",
        "limit: How many plurks should be returned? Default is 20.\n            ",
        "filter: Can be my, responded, private or favorite ",
        "favorers_detail: If true, detailed users information about all favorers of all plurks will be included into \"plurk_users\"\n            ",
        "limited_detail: If true, detailed users information about all private plurks' recepients will be included into \"plurk_users\"\n            ",
        "replurkers_detail: If true, detailed users information about all replurkers of all plurks will be included into \"plurk_users\"\n\n        "
      ],
      "offset": ": Return plurks older than offset, formatted as 2009-6-20T21:55:34.\n\t    ",
      "limit": ": How many plurks should be returned? Default is 20.\n            ",
      "filter": ": Can be my, responded, private or favorite ",
      "favorers_detail": ": If true, detailed users information about all favorers of all plurks will be included into \"plurk_users\"\n            ",
      "limited_detail": ": If true, detailed users information about all private plurks' recepients will be included into \"plurk_users\"\n            ",
      "replurkers_detail": ": If true, detailed users information about all replurkers of all plurks will be included into \"plurk_users\"\n\n        "
    },
    "Successful return:": {
      "__data": [
        "Returns a JSON object of plurks and their users, e.g. {\"plurks\": [{\"plurk_id\": 3, \"content\": \"Test\", \"qualifier_translated\": \"says\", \"qualifier\": \"says\", \"lang\": \"en\" ...}, ...], \"plurk_users\": {\"3\": {\"id\": 3, \"nick_name\": \"alvin\", ...}} "
      ]
    },
    "Error returns:": {
      "__data": []
    }
  },
  "/APP/Timeline/getUnreadPlurks": {
    "type": "Timeline",
    "Required parameters:": {
      "__data": [
        "none"
      ]
    },
    "Optional parameters:": {
      "__data": [
        "offset: Return plurks older than offset, formatted as 2009-6-20T21:55:34.\n\t    ",
        "limit: Limit the number of plurks that is returned\n\t    ",
        "filter: Limit the plurks returned, could be 'my', 'responded', 'private' or 'favorite' (default: 'all')\n\n            ",
        "favorers_detail, limited_detail and replurkers_detail: See /APP/Timline/getPlurks for details\n\n        "
      ],
      "offset": ": Return plurks older than offset, formatted as 2009-6-20T21:55:34.\n\t    ",
      "limit": ": Limit the number of plurks that is returned\n\t    ",
      "filter": ": Limit the plurks returned, could be 'my', 'responded', 'private' or 'favorite' (default: 'all')\n\n            ",
      "favorers_detail": ", limited_detail and replurkers_detail: See /APP/Timline/getPlurks for details\n\n        "
    },
    "Successful return:": {
      "__data": [
        "Returns a JSON object of unread plurks and their users, e.g. {\"plurks\": [{\"plurk_id\": 3, \"content\": \"Test\", \"qualifier_translated\": \"says\", \"qualifier\": \"says\", \"lang\": \"en\" ...}, ...], \"plurk_users\": {\"3\": {\"id\": 3, \"nick_name\": \"alvin\", ...}} "
      ]
    },
    "Error returns:": {
      "__data": []
    }
  },
  "/APP/Timeline/getPublicPlurks": {
    "type": "Timeline",
    "Required parameters:": {
      "__data": [
        "user_id: The user_id of the public plurks owner to get. Can be integer (like 34) or nick name (like amix).\n\n        "
      ],
      "user_id": ": The user_id of the public plurks owner to get. Can be integer (like 34) or nick name (like amix).\n\n        "
    },
    "Optional parameters:": {
      "__data": [
        "offset: Return plurks older than offset, formatted as 2009-6-20T21:55:34.\n        ",
        "limit: Limit the number of plurks that is retunred (default: 20)\n\n        ",
        "favorers_detail, limited_detail and replurkers_detail: See /APP/Timline/getPlurks for details\n\n "
      ],
      "offset": ": Return plurks older than offset, formatted as 2009-6-20T21:55:34.\n        ",
      "limit": ": Limit the number of plurks that is retunred (default: 20)\n\n        ",
      "favorers_detail": ", limited_detail and replurkers_detail: See /APP/Timline/getPlurks for details\n\n "
    },
    "Successful return:": {
      "__data": [
        "Returns a JSON object of public plurks and user information, e.g. {\"plurks\": [{\"plurk_id\": 3, \"content\": \"Test\", \"qualifier_translated\": \"says\", \"qualifier\": \"says\", \"lang\": \"en\" ...}, ...], \"plurk_users\": {\"3\": {\"id\": 3, \"nick_name\": \"alvin\", ...}} "
      ]
    },
    "Error returns:": {
      "__data": []
    }
  },
  "/APP/Timeline/plurkAdd": {
    "type": "Timeline",
    "Required parameters:": {
      "__data": [
        "content: The Plurk's text.\n        ",
        "qualifier: The Plurk's qualifier, must be in English. Can be following:\n                            loves likes shares gives hates wants has will asks wishes was feels thinks says is : freestyle hopes needs wonders "
      ],
      "content": ": The Plurk's text.\n        ",
      "qualifier": ": The Plurk's qualifier, must be in English. Can be following:\n                            loves likes shares gives hates wants has will asks wishes was feels thinks says is : freestyle hopes needs wonders "
    },
    "Optional parameters:": {
      "__data": [
        "limited_to: Limit the plurk only to some users (also known as private plurking). limited_to should be a JSON list of friend ids, e.g. limited_to of [3,4,66,34] will only be plurked to these user ids.\n        If limited_to is [0] then the Plurk is privatley posted to the poster's friends.\n        ",
        "no_comments: If set to 1, then responses are disabled for this plurk.\n\t\tIf set to 2, then only friends can respond to this plurk.\n\n        ",
        "lang: The plurk's language. Can be following:\n                        'en': 'English' 'pt_BR': 'Português' 'cn': '中文 (中国)' 'ca': 'Català' 'el': 'Ελληνικά' 'dk': 'Dansk' 'de': 'Deutsch' 'es': 'Español' 'sv': 'Svenska' 'nb': 'Norsk bokmål' 'hi': 'Hindi' 'ro': 'Română' 'hr': 'Hrvatski' 'fr': 'Français' 'ru': 'Pусский' 'it': 'Italiano ' 'ja': '日本語' 'he': 'עברית' 'hu': 'Magyar' 'ne': 'Nederlands' 'th': 'ไทย' 'ta_fp': 'Filipino' 'in': 'Bahasa Indonesia' 'pl': 'Polski' 'ar': 'العربية' 'fi': 'Finnish' 'tr_ch': '中文 (繁體中文)' 'tr': 'Türkçe' 'ga': 'Gaeilge' 'sk': 'Slovenský' 'uk': 'українська' 'fa': 'فارسی "
      ],
      "limited_to": ": Limit the plurk only to some users (also known as private plurking). limited_to should be a JSON list of friend ids, e.g. limited_to of [3,4,66,34] will only be plurked to these user ids.\n        If limited_to is [0] then the Plurk is privatley posted to the poster's friends.\n        ",
      "no_comments": ": If set to 1, then responses are disabled for this plurk.\n\t\tIf set to 2, then only friends can respond to this plurk.\n\n        ",
      "lang": ": The plurk's language. Can be following:\n                        'en': 'English' 'pt_BR': 'Português' 'cn': '中文 (中国)' 'ca': 'Català' 'el': 'Ελληνικά' 'dk': 'Dansk' 'de': 'Deutsch' 'es': 'Español' 'sv': 'Svenska' 'nb': 'Norsk bokmål' 'hi': 'Hindi' 'ro': 'Română' 'hr': 'Hrvatski' 'fr': 'Français' 'ru': 'Pусский' 'it': 'Italiano ' 'ja': '日本語' 'he': 'עברית' 'hu': 'Magyar' 'ne': 'Nederlands' 'th': 'ไทย' 'ta_fp': 'Filipino' 'in': 'Bahasa Indonesia' 'pl': 'Polski' 'ar': 'العربية' 'fi': 'Finnish' 'tr_ch': '中文 (繁體中文)' 'tr': 'Türkçe' 'ga': 'Gaeilge' 'sk': 'Slovenský' 'uk': 'українська' 'fa': 'فارسی "
    },
    "Successful return:": {
      "__data": [
        "Returns a JSON object of the new plurk, e.g. {\"plurk_id\": 3, \"content\": \"Test\", \"qualifier_translated\": \"says\", \"qualifier\": \"says\", \"lang\": \"en\" ...} "
      ]
    },
    "Error returns:": {
      "__data": [
        "HTTP 400 BAD REQUEST with {\"error_text\": \"Invalid data\"} as body",
        "HTTP 400 BAD REQUEST with {\"error_text\": \"Must be friends\"} as body",
        "HTTP 400 BAD REQUEST with {\"error_text\": \"Content is empty\"} as body",
        "HTTP 400 BAD REQUEST with {\"error_text\": \"anti-flood-same-content\"} as body",
        "HTTP 400 BAD REQUEST with {\"error_text\": \"anti-flood-spam-domain\"} as body",
        "HTTP 400 BAD REQUEST with {\"error_text\": \"anti-flood-too-many-new\"} as body"
      ]
    }
  },
  "/APP/Timeline/plurkDelete": {
    "type": "Timeline",
    "Required parameters:": {
      "__data": [
        "plurk_id: The id of the plurk.\n\n        "
      ],
      "plurk_id": ": The id of the plurk.\n\n        "
    },
    "Successful return:": {
      "__data": [
        "{\"success_text\": \"ok\"} if the plurk is deleted"
      ]
    },
    "Error returns:": {
      "__data": [
        "HTTP 400 BAD REQUEST with {\"error_text\": \"Plurk not found\"} as body",
        "HTTP 400 BAD REQUEST with {\"error_text\": \"No permissions\"} as body"
      ]
    }
  },
  "/APP/Timeline/plurkEdit": {
    "type": "Timeline",
    "Required parameters:": {
      "__data": [
        "plurk_id: The id of the plurk.\n        ",
        "content: The content of plurk.\n\n        "
      ],
      "plurk_id": ": The id of the plurk.\n        ",
      "content": ": The content of plurk.\n\n        "
    },
    "Successful return:": {
      "__data": [
        "Returns a JSON object of the updated plurk, e.g. {\"plurk_id\": 3, \"content\": \"Test\", \"qualifier_translated\": \"says\", \"qualifier\": \"says\", \"lang\": \"en\" ...}"
      ]
    },
    "Error returns:": {
      "__data": [
        "HTTP 400 BAD REQUEST with {\"error_text\": \"Plurk not found\"} as body",
        "HTTP 400 BAD REQUEST with {\"error_text\": \"No permissions\"} as body"
      ]
    }
  },
  "/APP/Timeline/toggleComments": {
    "type": "Timeline",
    "Required parameters:": {
      "__data": [
        "plurk_id: The id of the plurk.\n        ",
        "no_comments: new no_comments value (0, 1 or 2)\n\n        "
      ],
      "plurk_id": ": The id of the plurk.\n        ",
      "no_comments": ": new no_comments value (0, 1 or 2)\n\n        "
    },
    "Successful return:": {
      "__data": [
        "latest no_comments value{\"no_comments\": 1}"
      ]
    },
    "Error returns:": {
      "__data": [
        "HTTP 400 BAD REQUEST with {\"error_text\": \"Plurk not found\"} as body"
      ]
    }
  },
  "/APP/Timeline/mutePlurks": {
    "type": "Timeline",
    "Required parameters:": {
      "__data": [
        "ids: The plurk ids, formated as JSON, e.g. [342,23242,2323] "
      ],
      "ids": ": The plurk ids, formated as JSON, e.g. [342,23242,2323] "
    },
    "Successful return:": {
      "__data": [
        "{\"success_text\": \"ok\"} if the plurks are muted"
      ]
    },
    "Error returns:": {
      "__data": []
    }
  },
  "/APP/Timeline/unmutePlurks": {
    "type": "Timeline",
    "Required parameters:": {
      "__data": [
        "ids: The plurk ids, formated as JSON, e.g. [342,23242,2323] "
      ],
      "ids": ": The plurk ids, formated as JSON, e.g. [342,23242,2323] "
    },
    "Successful return:": {
      "__data": [
        "{\"success_text\": \"ok\"} if the plurks are unmuted"
      ]
    },
    "Error returns:": {
      "__data": []
    }
  },
  "/APP/Timeline/favoritePlurks": {
    "type": "Timeline",
    "Required parameters:": {
      "__data": [
        "ids: The plurk ids, formated as JSON, e.g. [342,23242,2323] "
      ],
      "ids": ": The plurk ids, formated as JSON, e.g. [342,23242,2323] "
    },
    "Successful return:": {
      "__data": [
        "{\"success_text\": \"ok\"} if the plurks are favorited"
      ]
    },
    "Error returns:": {
      "__data": []
    }
  },
  "/APP/Timeline/unfavoritePlurks": {
    "type": "Timeline",
    "Required parameters:": {
      "__data": [
        "ids: The plurk ids, formated as JSON, e.g. [342,23242,2323] "
      ],
      "ids": ": The plurk ids, formated as JSON, e.g. [342,23242,2323] "
    },
    "Successful return:": {
      "__data": [
        "{\"success_text\": \"ok\"} if the plurks are unfavorited"
      ]
    },
    "Error returns:": {
      "__data": []
    }
  },
  "/APP/Timeline/replurk": {
    "type": "Timeline",
    "Required parameters:": {
      "__data": [
        "ids: The plurk ids, formated as JSON, e.g. [342,23242,2323] "
      ],
      "ids": ": The plurk ids, formated as JSON, e.g. [342,23242,2323] "
    },
    "Returns:": {
      "__data": [
        "{\"success\": true, \"results\": {342: {\"success\": true, \"error\":\"\"}}}where top-level success is true if all plurks has been replurked"
      ]
    },
    "Error returns:": {
      "__data": []
    }
  },
  "/APP/Timeline/unreplurk": {
    "type": "Timeline",
    "Required parameters:": {
      "__data": [
        "ids: The plurk ids, formated as JSON, e.g. [342,23242,2323] "
      ],
      "ids": ": The plurk ids, formated as JSON, e.g. [342,23242,2323] "
    },
    "Returns:": {
      "__data": [
        "{\"success\": true, \"results\": {342: {\"success\": true, \"error\":\"\"}}}where top-level success is true if all plurks has been unreplurked"
      ]
    },
    "Error returns:": {
      "__data": []
    }
  },
  "/APP/Timeline/markAsRead": {
    "type": "Timeline",
    "Required parameters:": {
      "__data": [
        "ids: The plurk ids, formated as JSON, e.g. [342,23242,2323] "
      ],
      "ids": ": The plurk ids, formated as JSON, e.g. [342,23242,2323] "
    },
    "Optional parameters:": {
      "__data": [
        "note_position: If true responses_seen of the plurks will be updated as well (to match response_count).\n\n        "
      ],
      "note_position": ": If true responses_seen of the plurks will be updated as well (to match response_count).\n\n        "
    },
    "Successful return:": {
      "__data": [
        "{\"success_text\": \"ok\"} if the plurks are marked as read"
      ]
    },
    "Error returns:": {
      "__data": []
    }
  },
  "/APP/Timeline/uploadPicture": {
    "type": "Timeline",
    "Required parameters:": {
      "__data": [
        "image: The image file.\n\n        "
      ],
      "image": ": The image file.\n\n        "
    },
    "Successful return:": {
      "__data": [
        "Returns a JSON object of the links, e.g. like this {\"full\": \"http://images.plurk.com/3466076_9b41abf90c623ba18f6ada5c1d37156f.jpg\", \"thumbnail\": \"http://images.plurk.com/tn_3466076_9b41abf90c623ba18f6ada5c1d37156f.gif\"}.\n        "
      ]
    },
    "Error returns:": {
      "__data": [
        "HTTP 400 BAD REQUEST with {\"error_text\": \"Invalid file\"} as body"
      ]
    }
  },
  "/APP/Timeline/reportAbuse": {
    "type": "Timeline",
    "Required parameters:": {
      "__data": [
        "plurk_id: The plurk id to be reported as abuse.",
        "categoty: type of abuse. should be one of the following: porn, spam, privacy, violence, others.",
        "\n        porn:       Nudity and Pornography (Nudity and Pornography)\n        spam:       Spam and Phishing (Spam and Phishing)\n        privacy:    Privacy and Identity (Privacy and Identity)\n        violence:   Violence and Threats (Violence and Threats)\n        others:     Others (Others)\n         "
      ],
      "plurk_id": ": The plurk id to be reported as abuse.",
      "categoty": ": type of abuse. should be one of the following: porn, spam, privacy, violence, others."
    },
    "Successful return:": {
      "__data": [
        "{\"success_text\": \"ok\"} if the plurk is being reported successfully."
      ]
    },
    "Error returns:": {
      "__data": []
    }
  },
  "/APP/Responses/get": {
    "type": "Responses",
    "Required parameters:": {
      "__data": [
        "plurk_id: The plurk that the responses belong to.\n\n        "
      ],
      "plurk_id": ": The plurk that the responses belong to.\n\n        "
    },
    "Optional parameters:": {
      "__data": [
        "from_response: Only fetch responses from an offset - could be 5, 10 or 15 (default: 0)\n\n        "
      ],
      "from_response": ": Only fetch responses from an offset - could be 5, 10 or 15 (default: 0)\n\n        "
    },
    "Anonymous responses:": {
      "__data": [
        "Anonymous plurk may contains anonymous response. In that case, the user_id will be overrided by 99999 (anonymous). And additional value \"handle\" will be attached to each response, which represents user's anonymous identify and can be used to distinct different responder in the responses. If \"handle\" is provided, it should be displayed as the responder's display name of the response. And another value \"my_anonymous\" will be provided as true if the corresponding response was posted by current user.\n\n\n        "
      ]
    },
    "Successful return:": {
      "__data": [
        "Returns a JSON object of responses, friends (users that has posted responses) and responses_seen (the last response that the logged in user has seen) e.g. {\"friends\": {\"3\": ...}, \"responses_seen\": 2, \"responses\": [{\"lang\": \"en\", \"content_raw\": \"Reforms...}} "
      ]
    },
    "Error returns:": {
      "__data": [
        "HTTP 400 BAD REQUEST with {\"error_text\": \"Invalid data\"} as body",
        "HTTP 400 BAD REQUEST with {\"error_text\": \"Plurk not found\"} as body",
        "HTTP 400 BAD REQUEST with {\"error_text\": \"No permissions\"} as body"
      ]
    }
  },
  "/APP/Responses/responseAdd": {
    "type": "Responses",
    "Required parameters:": {
      "__data": [
        "plurk_id: The plurk that the responses should be added to.\n        ",
        "content: The response's text.\n        ",
        "qualifier: The Plurk's qualifier, must be in English. Can be following:\n                            loves likes shares gives hates wants has will asks wishes was feels thinks says is : freestyle hopes needs wonders "
      ],
      "plurk_id": ": The plurk that the responses should be added to.\n        ",
      "content": ": The response's text.\n        ",
      "qualifier": ": The Plurk's qualifier, must be in English. Can be following:\n                            loves likes shares gives hates wants has will asks wishes was feels thinks says is : freestyle hopes needs wonders "
    },
    "Successful return:": {
      "__data": [
        "Returns a JSON object of the new responses, e.g. {\"id\": 3, \"content\": \"Test\", \"qualifier_translated\": \"says\", \"qualifier\": \"says\", ...} "
      ]
    },
    "Error returns:": {
      "__data": [
        "HTTP 400 BAD REQUEST with {\"error_text\": \"Invalid data\"} as body",
        "HTTP 400 BAD REQUEST with {\"error_text\": \"Content is empty\"} as body",
        "HTTP 400 BAD REQUEST with {\"error_text\": \"Plurk not found\"} as body",
        "HTTP 400 BAD REQUEST with {\"error_text\": \"No permissions\"} as body",
        "HTTP 400 BAD REQUEST with {\"error_text\": \"anti-flood-same-content\"} as body",
        "HTTP 400 BAD REQUEST with {\"error_text\": \"anti-flood-too-many-new\"} as body"
      ]
    }
  },
  "/APP/Responses/responseDelete": {
    "type": "Responses",
    "Required parameters:": {
      "__data": [
        "response_id: The id of the response to delete.\n        ",
        "plurk_id: The plurk that the response belongs to.\n\n        "
      ],
      "response_id": ": The id of the response to delete.\n        ",
      "plurk_id": ": The plurk that the response belongs to.\n\n        "
    },
    "Successful return:": {
      "__data": [
        "{\"success_text\": \"ok\"} if the response has been deleted."
      ]
    },
    "Error returns:": {
      "__data": [
        "HTTP 400 BAD REQUEST with {\"error_text\": \"Invalid data\"} as body",
        "HTTP 400 BAD REQUEST with {\"error_text\": \"No permissions\"} as body"
      ]
    }
  },
  "/APP/FriendsFans/getFriendsByOffset": {
    "type": "Friends and fans",
    "Required parameters:": {
      "__data": [
        "user_id "
      ],
      "user_id": " "
    },
    "Optional parameters:": {
      "__data": [
        "offset: The offset, can be 10, 20, 30 etc.\n        ",
        "limit: The max number of friends to be returned (default 10).\n\n        "
      ],
      "offset": ": The offset, can be 10, 20, 30 etc.\n        ",
      "limit": ": The max number of friends to be returned (default 10).\n\n        "
    },
    "Successful return:": {
      "__data": [
        "Returns a list of JSON objects users, e.g. [{\"id\": 3, \"nick_name\": \"alvin\", ...}, ...]"
      ]
    }
  },
  "/APP/FriendsFans/getFansByOffset": {
    "type": "Friends and fans",
    "Required parameters:": {
      "__data": [
        "user_id "
      ],
      "user_id": " "
    },
    "Optional parameters:": {
      "__data": [
        "offset: The offset, can be 10, 20, 30 etc.\n        ",
        "limit: The max number of fans to be returned (default 10).\n\n        "
      ],
      "offset": ": The offset, can be 10, 20, 30 etc.\n        ",
      "limit": ": The max number of fans to be returned (default 10).\n\n        "
    },
    "Successful return:": {
      "__data": [
        "Returns a list of JSON objects users, e.g. [{\"id\": 3, \"nick_name\": \"alvin\", ...}, ...]"
      ]
    }
  },
  "/APP/FriendsFans/getFollowingByOffset": {
    "type": "Friends and fans",
    "Required parameters:": {
      "__data": [
        "none"
      ]
    },
    "Optional parameters:": {
      "__data": [
        "offset: The offset, can be 10, 20, 30 etc.\n        ",
        "limit: The max number of followings to be returned (default 10).\n\n        "
      ],
      "offset": ": The offset, can be 10, 20, 30 etc.\n        ",
      "limit": ": The max number of followings to be returned (default 10).\n\n        "
    },
    "Successful return:": {
      "__data": [
        "Returns a list of JSON objects users, e.g. [{\"id\": 3, \"nick_name\": \"alvin\", ...}, ...]"
      ]
    }
  },
  "/APP/FriendsFans/becomeFriend": {
    "type": "Friends and fans",
    "Required parameters:": {
      "__data": [
        "friend_id: The ID of the user you want to befriend.\n\n        "
      ],
      "friend_id": ": The ID of the user you want to befriend.\n\n        "
    },
    "Successful return:": {
      "__data": [
        "{\"success_text\": \"ok\"} if a friend request has been made."
      ]
    },
    "Error returns:": {
      "__data": [
        "HTTP 400 BAD REQUEST with {\"error_text\": \"User can't be befriended\"} as body",
        "HTTP 400 BAD REQUEST with {\"error_text\": \"User already befriended\"} as body"
      ]
    }
  },
  "/APP/FriendsFans/removeAsFriend": {
    "type": "Friends and fans",
    "Required parameters:": {
      "__data": [
        "friend_id: The ID of the user you want to remove\n\n        "
      ],
      "friend_id": ": The ID of the user you want to remove\n\n        "
    },
    "Successful return:": {
      "__data": [
        "{\"success_text\": \"ok\"} if friend_id has been removed as friend."
      ]
    }
  },
  "/APP/FriendsFans/becomeFan": {
    "type": "Friends and fans",
    "Required parameters:": {
      "__data": [
        "fan_id: The ID of the user you want to become fan of\n\n        "
      ],
      "fan_id": ": The ID of the user you want to become fan of\n\n        "
    },
    "Successful return:": {
      "__data": [
        "{\"success_text\": \"ok\"} if the current logged in user is a fan of fan_id."
      ]
    }
  },
  "/APP/FriendsFans/setFollowing": {
    "type": "Friends and fans",
    "Required parameters:": {
      "__data": [
        "user_id: The ID of the user you want to follow/unfollow\n        ",
        "follow: true if the user should be followed, and false if the user should be unfollowed.\n\n        "
      ],
      "user_id": ": The ID of the user you want to follow/unfollow\n        ",
      "follow": ": true if the user should be followed, and false if the user should be unfollowed.\n\n        "
    },
    "Successful return:": {
      "__data": [
        "{\"success_text\": \"ok\"} if following information is updated."
      ]
    },
    "Error returns:": {
      "__data": [
        "HTTP 400 BAD REQUEST with {\"error_text\": \"User must be befriended before you can follow them\"} as body"
      ]
    }
  },
  "/APP/FriendsFans/getCompletion": {
    "type": "Friends and fans",
    "Required parameters:": {
      "__data": [
        "none"
      ]
    },
    "Successful return:": {
      "__data": [
        "{\"2\": {\"nick_name\": \"kan\", \"full_name\": \"Kan Kan\"}, \"4\": {\"nick_name\": \"mitsuhiko\", ...}, ...}"
      ]
    }
  },
  "/APP/Alerts/getActive": {
    "type": "Alerts",
    "Required parameters:": {
      "__data": [
        "none"
      ]
    },
    "Successful return:": {
      "__data": [
        "[{\"id\": 42, \"nick_name\": \"frodo_b\", ...}, ...] JSON object of all the active alerts"
      ]
    },
    "Error returns:": {
      "__data": []
    }
  },
  "/APP/Alerts/getHistory": {
    "type": "Alerts",
    "Required parameters:": {
      "__data": [
        "none"
      ]
    },
    "Successful return:": {
      "__data": [
        "[{\"nick_name\": \"frodo_b\", ...}, ...] JSON object of all the history alerts"
      ]
    },
    "Error returns:": {
      "__data": []
    }
  },
  "/APP/Alerts/addAsFan": {
    "type": "Alerts",
    "Required parameters:": {
      "__data": [
        "user_id: The user_id that has asked for friendship.\n\n        "
      ],
      "user_id": ": The user_id that has asked for friendship.\n\n        "
    },
    "Successful return:": {
      "__data": [
        "{\"success_text\": \"ok\"}"
      ]
    },
    "Error returns:": {
      "__data": []
    }
  },
  "/APP/Alerts/addAllAsFan": {
    "type": "Alerts",
    "Required parameters:": {
      "__data": [
        "none"
      ]
    },
    "Successful return:": {
      "__data": [
        "{\"success_text\": \"ok\"}"
      ]
    },
    "Error returns:": {
      "__data": []
    }
  },
  "/APP/Alerts/addAllAsFriends": {
    "type": "Alerts",
    "Required parameters:": {
      "__data": [
        "none"
      ]
    },
    "Successful return:": {
      "__data": [
        "{\"success_text\": \"ok\"}"
      ]
    },
    "Error returns:": {
      "__data": []
    }
  },
  "/APP/Alerts/addAsFriend": {
    "type": "Alerts",
    "Required parameters:": {
      "__data": [
        "user_id: The user_id that has asked for friendship.\n\n        "
      ],
      "user_id": ": The user_id that has asked for friendship.\n\n        "
    },
    "Successful return:": {
      "__data": [
        "{\"success_text\": \"ok\"}"
      ]
    },
    "Error returns:": {
      "__data": []
    }
  },
  "/APP/Alerts/denyFriendship": {
    "type": "Alerts",
    "Required parameters:": {
      "__data": [
        "user_id: The user_id that has asked for friendship.\n\n        "
      ],
      "user_id": ": The user_id that has asked for friendship.\n\n        "
    },
    "Successful return:": {
      "__data": [
        "{\"success_text\": \"ok\"}"
      ]
    },
    "Error returns:": {
      "__data": []
    }
  },
  "/APP/Alerts/removeNotification": {
    "type": "Alerts",
    "Required parameters:": {
      "__data": [
        "user_id: The user_id that the current user has requested friendship for.\n\n        "
      ],
      "user_id": ": The user_id that the current user has requested friendship for.\n\n        "
    },
    "Successful return:": {
      "__data": [
        "{\"success_text\": \"ok\"}"
      ]
    },
    "Error returns:": {
      "__data": []
    }
  },
  "/APP/PlurkSearch/search": {
    "type": "Search",
    "Required parameters:": {
      "__data": [
        "query: The query after Plurks.\n\n        "
      ],
      "query": ": The query after Plurks.\n\n        "
    },
    "Optional parameters:": {
      "__data": [
        "offset: A plurk_id of the oldest Plurk in the last search result.\n\n        "
      ],
      "offset": ": A plurk_id of the oldest Plurk in the last search result.\n\n        "
    },
    "Successful return:": {
      "__data": [
        "A JSON list of plurks that the user have permissions to see: [{\"id\": 3, \"content\": \"Test\", \"qualifier_translated\": \"says\", \"qualifier\": \"says\", ...}, ...]"
      ]
    }
  },
  "/APP/UserSearch/search": {
    "type": "Search",
    "Required parameters:": {
      "__data": [
        "query: The query after users.\n\n        "
      ],
      "query": ": The query after users.\n\n        "
    },
    "Optional parameters:": {
      "__data": [
        "offset: Page offset, like 10, 20, 30 etc.\n\n        "
      ],
      "offset": ": Page offset, like 10, 20, 30 etc.\n\n        "
    },
    "Successful return:": {
      "__data": [
        "A JSON list of plurks that the user have permissions to see: [{\"id\": 3, \"content\": \"Test\", \"qualifier_translated\": \"says\", \"qualifier\": \"says\", ...}, ...]"
      ]
    }
  },
  "/APP/Emoticons/get": {
    "type": "Emoticons"
  },
  "/APP/Blocks/get": {
    "type": "Blocks",
    "Required parameters:": {
      "__data": [
        "none"
      ]
    },
    "Optional parameters:": {
      "__data": [
        "offset: What page should be shown, e.g. 0, 10, 20.\n\n        "
      ],
      "offset": ": What page should be shown, e.g. 0, 10, 20.\n\n        "
    },
    "Successful return:": {
      "__data": [
        "A JSON list of users that are blocked by the current user, e.g. {\"total\": 12, \"users\": {\"display_name\": \"amix3\", \"gender\": 0, \"nick_name\": \"amix\", \"has_profile_image\": 1, \"id\": 1, \"avatar\": null}, ...]}"
      ]
    }
  },
  "/APP/Blocks/block": {
    "type": "Blocks",
    "Required parameters:": {
      "__data": [
        "user_id: The id of the user that should be blocked.\n\n        "
      ],
      "user_id": ": The id of the user that should be blocked.\n\n        "
    },
    "Successful return:": {
      "__data": [
        "{\"success_text\": \"ok\"}"
      ]
    }
  },
  "/APP/Blocks/unblock": {
    "type": "Blocks",
    "Required parameters:": {
      "__data": [
        "user_id: The id of the user that should be unblocked.\n\n        "
      ],
      "user_id": ": The id of the user that should be unblocked.\n\n        "
    },
    "Successful return:": {
      "__data": [
        "{\"success_text\": \"ok\"}"
      ]
    }
  },
  "/APP/Cliques/getCliques": {
    "type": "Cliques",
    "Required parameters:": {
      "__data": [
        "none"
      ]
    },
    "Successful return:": {
      "__data": [
        "[\"Homies\", \"Coders\", ...]"
      ]
    }
  },
  "/APP/Cliques/getClique": {
    "type": "Cliques",
    "Required parameters:": {
      "__data": [
        "clique_name: The name of the new clique\n\n        "
      ],
      "clique_name": ": The name of the new clique\n\n        "
    },
    "Successful return:": {
      "__data": [
        "Returns the users in the clique, e.g. [{\"display_name\": \"amix3\", \"gender\": 0, \"nick_name\": \"amix\", \"has_profile_image\": 1, \"id\": 1, \"avatar\": null}, ...] "
      ]
    }
  },
  "/APP/Cliques/createClique": {
    "type": "Cliques",
    "Required parameters:": {
      "__data": [
        "clique_name: The name of the new clique\n\n        "
      ],
      "clique_name": ": The name of the new clique\n\n        "
    },
    "Successful return:": {
      "__data": [
        "{\"success_text\": \"ok\"} "
      ]
    }
  },
  "/APP/Cliques/renameClique": {
    "type": "Cliques",
    "Required parameters:": {
      "__data": [
        "clique_name: The name of the clique to rename\n        ",
        "new_name: The name of the new clique\n\n        "
      ],
      "clique_name": ": The name of the clique to rename\n        ",
      "new_name": ": The name of the new clique\n\n        "
    },
    "Successful return:": {
      "__data": [
        "{\"success_text\": \"ok\"} "
      ]
    }
  },
  "/APP/Cliques/add": {
    "type": "Cliques",
    "Required parameters:": {
      "__data": [
        "clique_name: The name of the clique\n        ",
        "user_id: The user to add to the clique\n\n        "
      ],
      "clique_name": ": The name of the clique\n        ",
      "user_id": ": The user to add to the clique\n\n        "
    },
    "Successful return:": {
      "__data": [
        "{\"success_text\": \"ok\"} "
      ]
    },
    "Error returns:": {
      "__data": [
        "HTTP 400 BAD REQUEST with {\"error_text\": \"Clique not created\"} as body"
      ]
    }
  },
  "/APP/Cliques/remove": {
    "type": "Cliques",
    "Required parameters:": {
      "__data": [
        "clique_name: The name of the clique\n        ",
        "user_id: The user to remove from the clique\n\n        "
      ],
      "clique_name": ": The name of the clique\n        ",
      "user_id": ": The user to remove from the clique\n\n        "
    },
    "Successful return:": {
      "__data": [
        "{\"success_text\": \"ok\"} "
      ]
    },
    "Error returns:": {
      "__data": [
        "HTTP 400 BAD REQUEST with {\"error_text\": \"Clique not created\"} as body"
      ]
    }
  },
  "/APP/PlurkTop/getCollections": {
    "type": "PlurkTop",
    "Required parameters:": {
      "__data": [
        "none "
      ],
      "none": " "
    },
    "Successful return:": {
      "__data": [
        "[\n            [u'Taiwan', u'cn,tr_ch,en', u'\\u53f0\\u7063'],\n            [u'English', u'en', u'English'],\n            [u'Philippines', u'en,en_fo,ta_fp', u'Pilipinas'],\n            ...\n            [u'Educators', u'en,es', u'Educators']]\n        ]"
      ]
    }
  },
  "/APP/PlurkTop/getTopics": {
    "type": "PlurkTop",
    "Required parameters:": {
      "__data": [
        "none "
      ],
      "none": " "
    },
    "Optional parameters:": {
      "__data": [
        "lang: get topics for specified lang (default: en)\n    "
      ],
      "lang": ": get topics for specified lang (default: en)\n    "
    }
  },
  "/APP/PlurkTop/getPlurks": {
    "type": "PlurkTop",
    "Required parameters:": {
      "__data": [
        "collection_name: only get plurks in specified collection\n\n        "
      ],
      "collection_name": ": only get plurks in specified collection\n\n        "
    },
    "Optional parameters:": {
      "__data": [
        "offset: offset of Plurks in PlurkTop, should be an float,\n        e.g. 0.99.\n        ",
        "limit: number of plurks returned (default: 30)\n        ",
        "sorting: the way to sort plurks in PlurkTop, can be \"hot\"\n        for sorting by popularity or \"new\" for posted time.\n        ",
        "topic_filter: only show topic with this id (default: null)\n\n        "
      ],
      "offset": ": offset of Plurks in PlurkTop, should be an float,\n        e.g. 0.99.\n        ",
      "limit": ": number of plurks returned (default: 30)\n        ",
      "sorting": ": the way to sort plurks in PlurkTop, can be \"hot\"\n        for sorting by popularity or \"new\" for posted time.\n        ",
      "topic_filter": ": only show topic with this id (default: null)\n\n        "
    },
    "Successful return:": {
      "__data": [
        "Returns a JSON object of plurks and their users. The offset in\n        result is the offset value of last plurk in the result.\n        e.g. {\"offset\": 0.8, \"plurks\": [{\"plurk_id\": 3, \"content\": \"Test\", \"qualifier_translated\": \"says\", \"qualifier\": \"says\", \"lang\": \"en\" ...}, ...], \"plurk_users\": {\"3\": {\"id\": 3, \"nick_name\": \"alvin\", ...}} "
      ]
    }
  },
  "/APP/checkToken": {
    "type": "OAuth Utilities",
    "Required parameters:": {
      "__data": [
        "none "
      ],
      "none": " "
    },
    "Successful return:": {
      "__data": [
        "app_id: application id of this access token\n\t\t",
        "user_id: user id of this access token\n\t\t",
        "issued: the date/time when this token is issued\n\t\t",
        "deviceid: deviceid used to authorize this token\n    "
      ],
      "app_id": ": application id of this access token\n\t\t",
      "user_id": ": user id of this access token\n\t\t",
      "issued": ": the date/time when this token is issued\n\t\t",
      "deviceid": ": deviceid used to authorize this token\n    "
    }
  },
  "/APP/expireToken": {
    "type": "OAuth Utilities",
    "Required parameters:": {
      "__data": [
        "none "
      ],
      "none": " "
    },
    "Successful return:": {
      "__data": [
        "app_id: application id of this access token\n\t\t",
        "user_id: user id of this access token\n\t\t",
        "issued: the date/time when this token is issued\n\t\t",
        "deviceid: deviceid used to authorize this token\n    "
      ],
      "app_id": ": application id of this access token\n\t\t",
      "user_id": ": user id of this access token\n\t\t",
      "issued": ": the date/time when this token is issued\n\t\t",
      "deviceid": ": deviceid used to authorize this token\n    "
    }
  },
  "/APP/checkTime": {
    "type": "OAuth Utilities",
    "Required parameters:": {
      "__data": [
        "none "
      ],
      "none": " "
    },
    "Successful return:": {
      "__data": [
        "now: current time of plurk servers\n\t\t",
        "timestamp: current time of plurk servers (as UNIX timestamp)\n\t\t",
        "app_id: application id of this access token\n\t\t",
        "user_id: user id of this access token (null for two-legged OAuth)\n    "
      ],
      "now": ": current time of plurk servers\n\t\t",
      "timestamp": ": current time of plurk servers (as UNIX timestamp)\n\t\t",
      "app_id": ": application id of this access token\n\t\t",
      "user_id": ": user id of this access token (null for two-legged OAuth)\n    "
    }
  },
  "/APP/echo": {
    "type": "OAuth Utilities",
    "Required parameters:": {
      "__data": [
        "data "
      ],
      "data": " "
    },
    "Successful return:": {
      "__data": [
        "data: same as the data passing in\n\t\t",
        "length: length of data\n    "
      ],
      "data": ": same as the data passing in\n\t\t",
      "length": ": length of data\n    "
    }
  }
}