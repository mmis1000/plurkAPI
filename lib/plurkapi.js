// Generated by CoffeeScript 1.7.1
(function() {
  var APIs, EventEmitter, OAuth, PlurkAPI, Url, querystring, request, utils,
    __slice = [].slice;

  EventEmitter = require('events').EventEmitter;

  OAuth = require('OAuth');

  utils = require('./utils');

  request = require('request');

  querystring = require('querystring');

  Url = require('url');

  APIs = require('./plurkapilist.js');


  /*
    event : response     # new_response
    event : plurk        # new_plurk
    event : notification # update_notification
   */

  PlurkAPI = (function() {
    function PlurkAPI(config) {
      this.config = config;
      this.lang = this.config.lang || "tr_ch";
      this.qualifier = this.config.qualifier || ":";
      this.oauth = new OAuth.OAuth('http://www.plurk.com/OAuth/request_token', 'http://www.plurk.com/OAuth/access_token', config.appKey, config.appSecret, '1.0A', null, 'HMAC-SHA1');
      this.init_();
    }

    PlurkAPI.prototype.init_ = function() {
      var item, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = APIs.length; _i < _len; _i++) {
        item = APIs[_i];
        _results.push(this.registerAPI.apply(this, item));
      }
      return _results;
    };

    PlurkAPI.prototype.get = function() {
      var api, callback, options, _i;
      api = arguments[0], options = 3 <= arguments.length ? __slice.call(arguments, 1, _i = arguments.length - 1) : (_i = 1, []), callback = arguments[_i++];
      api = api.replace(/^\//, '');
      return this.oauth.post("http://www.plurk.com/APP/" + api, this.config.clientToken, this.config.clientSecret, utils.mergeDefault(options), (function(_this) {
        return function(e, data, res) {
          if (!e && res.statusCode !== 200) {
            e = new Error("unexpected http code '" + response.statusCode + "'");
          }
          try {
            data = JSON.parse(data);
          } catch (_error) {
            e = _error;
            if (!e) {
              e = new Error("response is not a valid JSON");
            }
          }
          return callback(e, data, res);
        };
      })(this));
    };

    PlurkAPI.prototype.registerAPI = function(path, inLineOptionNames, configOptions, defaultOptions) {
      var key, method, methodName, optionsFromConfig, shortMethodName, temp, value;
      if (inLineOptionNames == null) {
        inLineOptionNames = [];
      }
      if (configOptions == null) {
        configOptions = {};
      }
      if (defaultOptions == null) {
        defaultOptions = {};
      }
      methodName = path.split('/').filter(function(i) {
        return i !== '';
      }).map(function(i) {
        return i.replace(/^./, function(i) {
          return i.toUpperCase();
        });
      }).join('').replace(/^./, function(i) {
        return i.toLowerCase();
      });
      console.log(methodName);
      temp = path.split('/').filter(function(i) {
        return i !== '';
      }).map(function(i) {
        return i.replace(/^./, function(i) {
          return i.toUpperCase();
        });
      });
      shortMethodName = "";
      if (temp.length > 1) {
        temp.shift(1);
        shortMethodName = temp.join('').replace(/^./, function(i) {
          return i.toLowerCase();
        });
        console.log("  As " + shortMethodName);
        if (this[shortMethodName]) {
          console.log("  Conflict happened! ignore this short name");
          shortMethodName = "";
        }
      }
      optionsFromConfig = {};
      for (key in configOptions) {
        value = configOptions[key];
        if (configOptions.hasOwnProperty(key)) {
          optionsFromConfig[key] = this.config[value];
        }
      }
      method = function() {
        var args, callback, i, inLineOptions, inLineOptionsList, index, item, options, _i, _j, _len, _len1;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        if ('function' === typeof args[args.length - 1]) {
          callback = args.pop();
        }
        inLineOptionsList = [];
        for (_i = 0, _len = args.length; _i < _len; _i++) {
          i = args[_i];
          if (!utils.isRealObject(i)) {
            inLineOptionsList.push(args.shift());
          } else {
            break;
          }
        }
        inLineOptions = {};
        for (index = _j = 0, _len1 = inLineOptionsList.length; _j < _len1; index = ++_j) {
          item = inLineOptionsList[index];
          if (index < inLineOptionNames.length) {
            inLineOptions[inLineOptionNames[index]] = item;
          } else {
            break;
          }
        }
        options = utils.mergeDefault(inLineOptions, configOptions, defaultOptions);
        return this.get(path, options, callback);
      };
      method.displayName = methodName;
      this[methodName] = method;
      if (shortMethodName) {
        return this[shortMethodName] = method;
      }
    };

    return PlurkAPI;

  })();

  module.exports = PlurkAPI;

}).call(this);
